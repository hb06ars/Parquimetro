server:
  port: ${PORT:8080}
spring:
  redis:
    host: ${REDIS_URL:localhost}
    port: 6379
  kafka:
    bootstrap-servers: ${KAFKA_URL:localhost:9092}
    topic: ${TOPIC:parquimetrotopic}
    consumer:
      group-id: ${GROUP_CONSUMER:grupo-parquimetro}
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  datasource:
    url: ${POSTGRES_URL:jdbc:postgresql://localhost:5432/parquimetro}
    username: ${POSTGRES_USER:parquimetrousr}
    password: ${POSTGRES_PASS:Parquimetro@2024}
    driver-class-name: org.postgresql.Driver
    pool:
      enabled: true
      max-size: 20
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: true
topics:
  parquimetrotopic: ${PARQUIMETROTOPIC:parquimetrotopic}

# Se GERAR_DADOS_INICIAIS = true, será criado alguns dados para facilitar nas requisições.
local: ${GERAR_DADOS_INICIAIS:true}
